blocks_menu.v:2:8: warning: module 'blocks' is imported but never used
    1 | import gg
    2 | import blocks
      |        ~~~~~~
    3 | import gx
    4 |
blocks/condition.v:9:10: error: unknown type `blocks.Variants`.
Did you mean `font.Variant`?
    7 | pub:
    8 |     id      int
    9 |     variant Variants
      |             ~~~~~~~~
   10 | pub mut:
   11 |     x          int
blocks/function.v:9:10: error: unknown type `blocks.Variants`.
Did you mean `font.Variant`?
    7 | pub:
    8 |     id      int
    9 |     variant Variants
      |             ~~~~~~~~
   10 | pub mut:
   11 |     x int
blocks/input.v:9:10: error: unknown type `blocks.Variants`.
Did you mean `font.Variant`?
    7 | pub:
    8 |     id      int
    9 |     variant Variants
      |             ~~~~~~~~
   10 | pub mut:
   11 |     x int
blocks/input_output.v:9:10: error: unknown type `blocks.Variants`.
Did you mean `font.Variant`?
    7 | pub:
    8 |     id      int
    9 |     variant Variants
      |             ~~~~~~~~
   10 | pub mut:
   11 |     x int
blocks/loop.v:9:10: error: unknown type `blocks.Variants`.
Did you mean `font.Variant`?
    7 | pub:
    8 |     id      int
    9 |     variant Variants
      |             ~~~~~~~~
   10 | pub mut:
   11 |     x int
main.v:54:32: error: cannot assign to field `variant`: expected `blocks.Variants`, not `int`
   52 | 
   53 |     // lancement du programme/de la fenêtre
   54 |     app.blocks << blocks.Input{1, int(Vari.panic), 100, 100, [], -1, []}
      |                                   ~~~~~~~~~~~~~~~
   55 |     app.blocks << blocks.Input_output{2, int(Vari.declare), 250, 100, [], -1, -1, []}
   56 |     app.blocks << blocks.Function{4, int(Vari.function), 250, 200, [], 0, 0, [], [], []}
main.v:54:23: error: `blocks.Input` incorrectly implements field `variant` of interface `blocks.Blocks`, expected `int`, got `blocks.Variants`
   52 | 
   53 |     // lancement du programme/de la fenêtre
   54 |     app.blocks << blocks.Input{1, int(Vari.panic), 100, 100, [], -1, []}
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   55 |     app.blocks << blocks.Input_output{2, int(Vari.declare), 250, 100, [], -1, -1, []}
   56 |     app.blocks << blocks.Function{4, int(Vari.function), 250, 200, [], 0, 0, [], [], []}
main.v:55:39: error: cannot assign to field `variant`: expected `blocks.Variants`, not `int`
   53 |     // lancement du programme/de la fenêtre
   54 |     app.blocks << blocks.Input{1, int(Vari.panic), 100, 100, [], -1, []}
   55 |     app.blocks << blocks.Input_output{2, int(Vari.declare), 250, 100, [], -1, -1, []}
      |                                          ~~~~~~~~~~~~~~~~~
   56 |     app.blocks << blocks.Function{4, int(Vari.function), 250, 200, [], 0, 0, [], [], []}
   57 |     app.blocks << blocks.Loop{5, int(Vari.for_range), 400, 100, [], 0, -1, -1, -1, 0, []}
main.v:55:23: error: `blocks.Input_output` incorrectly implements field `variant` of interface `blocks.Blocks`, expected `int`, got `blocks.Variants`
   53 |     // lancement du programme/de la fenêtre
   54 |     app.blocks << blocks.Input{1, int(Vari.panic), 100, 100, [], -1, []}
   55 |     app.blocks << blocks.Input_output{2, int(Vari.declare), 250, 100, [], -1, -1, []}
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   56 |     app.blocks << blocks.Function{4, int(Vari.function), 250, 200, [], 0, 0, [], [], []}
   57 |     app.blocks << blocks.Loop{5, int(Vari.for_range), 400, 100, [], 0, -1, -1, -1, 0, []}
main.v:56:35: error: cannot assign to field `variant`: expected `blocks.Variants`, not `int`
   54 |     app.blocks << blocks.Input{1, int(Vari.panic), 100, 100, [], -1, []}
   55 |     app.blocks << blocks.Input_output{2, int(Vari.declare), 250, 100, [], -1, -1, []}
   56 |     app.blocks << blocks.Function{4, int(Vari.function), 250, 200, [], 0, 0, [], [], []}
      |                                      ~~~~~~~~~~~~~~~~~~
   57 |     app.blocks << blocks.Loop{5, int(Vari.for_range), 400, 100, [], 0, -1, -1, -1, 0, []}
   58 |     app.blocks << blocks.Condition{6, int(Vari.condition), 200, 400, [], -1, -1, [], [], [
main.v:56:23: error: `blocks.Function` incorrectly implements field `variant` of interface `blocks.Blocks`, expected `int`, got `blocks.Variants`
   54 |     app.blocks << blocks.Input{1, int(Vari.panic), 100, 100, [], -1, []}
   55 |     app.blocks << blocks.Input_output{2, int(Vari.declare), 250, 100, [], -1, -1, []}
   56 |     app.blocks << blocks.Function{4, int(Vari.function), 250, 200, [], 0, 0, [], [], []}
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   57 |     app.blocks << blocks.Loop{5, int(Vari.for_range), 400, 100, [], 0, -1, -1, -1, 0, []}
   58 |     app.blocks << blocks.Condition{6, int(Vari.condition), 200, 400, [], -1, -1, [], [], [
main.v:57:31: error: cannot assign to field `variant`: expected `blocks.Variants`, not `int`
   55 |     app.blocks << blocks.Input_output{2, int(Vari.declare), 250, 100, [], -1, -1, []}
   56 |     app.blocks << blocks.Function{4, int(Vari.function), 250, 200, [], 0, 0, [], [], []}
   57 |     app.blocks << blocks.Loop{5, int(Vari.for_range), 400, 100, [], 0, -1, -1, -1, 0, []}
      |                                  ~~~~~~~~~~~~~~~~~~~
   58 |     app.blocks << blocks.Condition{6, int(Vari.condition), 200, 400, [], -1, -1, [], [], [
   59 |         0,
main.v:57:23: error: `blocks.Loop` incorrectly implements field `variant` of interface `blocks.Blocks`, expected `int`, got `blocks.Variants`
   55 |     app.blocks << blocks.Input_output{2, int(Vari.declare), 250, 100, [], -1, -1, []}
   56 |     app.blocks << blocks.Function{4, int(Vari.function), 250, 200, [], 0, 0, [], [], []}
   57 |     app.blocks << blocks.Loop{5, int(Vari.for_range), 400, 100, [], 0, -1, -1, -1, 0, []}
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   58 |     app.blocks << blocks.Condition{6, int(Vari.condition), 200, 400, [], -1, -1, [], [], [
   59 |         0,
main.v:58:36: error: cannot assign to field `variant`: expected `blocks.Variants`, not `int`
   56 |     app.blocks << blocks.Function{4, int(Vari.function), 250, 200, [], 0, 0, [], [], []}
   57 |     app.blocks << blocks.Loop{5, int(Vari.for_range), 400, 100, [], 0, -1, -1, -1, 0, []}
   58 |     app.blocks << blocks.Condition{6, int(Vari.condition), 200, 400, [], -1, -1, [], [], [
      |                                       ~~~~~~~~~~~~~~~~~~~
   59 |         0,
   60 |     ]}
main.v:58:23: error: `blocks.Condition` incorrectly implements field `variant` of interface `blocks.Blocks`, expected `int`, got `blocks.Variants`
   56 |     app.blocks << blocks.Function{4, int(Vari.function), 250, 200, [], 0, 0, [], [], []}
   57 |     app.blocks << blocks.Loop{5, int(Vari.for_range), 400, 100, [], 0, -1, -1, -1, 0, []}
   58 |     app.blocks << blocks.Condition{6, int(Vari.condition), 200, 400, [], -1, -1, [], [], [
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   59 |         0,
   60 |     ]}
main.v:61:36: error: cannot assign to field `variant`: expected `blocks.Variants`, not `int`
   59 |         0,
   60 |     ]}
   61 |     app.blocks << blocks.Condition{7, int(Vari.condition), 100, 200, [], -1, -1, [], [], [
      |                                       ~~~~~~~~~~~~~~~~~~~
   62 |         0,
   63 |         0,
main.v:61:23: error: `blocks.Condition` incorrectly implements field `variant` of interface `blocks.Blocks`, expected `int`, got `blocks.Variants`
   59 |         0,
   60 |     ]}
   61 |     app.blocks << blocks.Condition{7, int(Vari.condition), 100, 200, [], -1, -1, [], [], [
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   62 |         0,
   63 |         0,
main.v:65:36: error: cannot assign to field `variant`: expected `blocks.Variants`, not `int`
   63 |         0,
   64 |     ]}
   65 |     app.blocks << blocks.Condition{8, int(Vari.@match), 400, 250, [], -1, -1, [], [], [
      |                                       ~~~~~~~~~~~~~~~~
   66 |         0,
   67 |         0,
main.v:65:23: error: `blocks.Condition` incorrectly implements field `variant` of interface `blocks.Blocks`, expected `int`, got `blocks.Variants`
   63 |         0,
   64 |     ]}
   65 |     app.blocks << blocks.Condition{8, int(Vari.@match), 400, 250, [], -1, -1, [], [], [
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   66 |         0,
   67 |         0,
show_blocks.v:6:10: error: `blocks.Function` incorrectly implements field `variant` of interface `blocks.Blocks`, expected `int`, got `blocks.Variants`
    4 | fn show_block(ctx gg.Context, mut block blocks.Blocks) {
    5 |     match mut block {
    6 |         blocks.Function {
      |                ~~~~~~~~
    7 |             block.text = ["function `name` `name type`(+) returns:`type`(+)"]
    8 |         }
show_blocks.v:9:10: error: `blocks.Condition` incorrectly implements field `variant` of interface `blocks.Blocks`, expected `int`, got `blocks.Variants`
    7 |             block.text = ["function `name` `name type`(+) returns:`type`(+)"]
    8 |         }
    9 |         blocks.Condition {
      |                ~~~~~~~~~
   10 |             mut a := []string{}    
   11 |             a << match Vari.from(block.variant) {
show_blocks.v:41:10: error: `blocks.Loop` incorrectly implements field `variant` of interface `blocks.Blocks`, expected `int`, got `blocks.Variants`
   39 |             block.text = a
   40 |         }
   41 |         blocks.Loop {
      |                ~~~~
   42 |             block.text = match Vari.from(block.variant) {
   43 |                 .for_range {
show_blocks.v:57:10: error: `blocks.Input` incorrectly implements field `variant` of interface `blocks.Blocks`, expected `int`, got `blocks.Variants`
   55 |             }
   56 |         }
   57 |         blocks.Input {
      |                ~~~~~
   58 |             block.text = match Vari.from(block.variant) {
   59 |                 .@return {
show_blocks.v:68:10: error: `blocks.Input_output` incorrectly implements field `variant` of interface `blocks.Blocks`, expected `int`, got `blocks.Variants`
   66 |             }
   67 |         }
   68 |         blocks.Input_output {
      |                ~~~~~~~~~~~~
   69 |             block.text = match Vari.from(block.variant) {
   70 |                 .declare {
show_blocks.v:11:15: error: Vari__static__from() returns `!Vari`, so it should have either an `or {}` block, or `!` at the end
    9 |         blocks.Condition {
   10 |             mut a := []string{}    
   11 |             a << match Vari.from(block.variant) {
      |                        ~~~~~~~~~~~~~~~~~~~~~~~~
   12 |                 .condition {
   13 |                     "if `condi` is true"
show_blocks.v:18:26: error: no known default format for type `blocks.Variants`
   16 |                     "if `val` is :"
   17 |                 }
   18 |                 else {panic("${block.variant} not supported")}
      |                                      ~~~~~~~
   19 |             }
   20 |             for nb in 0 .. block.size.len - 1 {
show_blocks.v:21:16: error: Vari__static__from() returns `!Vari`, so it should have either an `or {}` block, or `!` at the end
   19 |             }
   20 |             for nb in 0 .. block.size.len - 1 {
   21 |                 a << match Vari.from(block.variant) {
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~
   22 |                     .condition {
   23 |                         if nb == block.size.len - 2 {
show_blocks.v:36:27: error: no known default format for type `blocks.Variants`
   34 |                         }
   35 |                     }
   36 |                     else {panic("${block.variant} not supported")}
      |                                          ~~~~~~~
   37 |                 }
   38 |             }
show_blocks.v:42:23: error: Vari__static__from() returns `!Vari`, so it should have either an `or {}` block, or `!` at the end
   40 |         }
   41 |         blocks.Loop {
   42 |             block.text = match Vari.from(block.variant) {
      |                                ~~~~~~~~~~~~~~~~~~~~~~~~
   43 |                 .for_range {
   44 |                     ["for each `i` between [`0` and `5`)"]
show_blocks.v:53:21: error: no known default format for type `blocks.Variants`
   51 |                 }
   52 |                 else {
   53 |                     panic("${block.variant} not handled")
      |                                    ~~~~~~~
   54 |                 }
   55 |             }
show_blocks.v:58:23: error: Vari__static__from() returns `!Vari`, so it should have either an `or {}` block, or `!` at the end
   56 |         }
   57 |         blocks.Input {
   58 |             block.text = match Vari.from(block.variant) {
      |                                ~~~~~~~~~~~~~~~~~~~~~~~~
   59 |                 .@return {
   60 |                     ["return"]
show_blocks.v:65:26: error: no known default format for type `blocks.Variants`
   63 |                     ["panic `arg`"]
   64 |                 }
   65 |                 else {panic("${block.variant} not handled")}
      |                                      ~~~~~~~
   66 |             }
   67 |         }
show_blocks.v:69:23: error: Vari__static__from() returns `!Vari`, so it should have either an `or {}` block, or `!` at the end
   67 |         }
   68 |         blocks.Input_output {
   69 |             block.text = match Vari.from(block.variant) {
      |                                ~~~~~~~~~~~~~~~~~~~~~~~~
   70 |                 .declare {
   71 |                     ["new [x]mutable variable `a` with value `val`"]
show_blocks.v:73:26: error: no known default format for type `blocks.Variants`
   71 |                     ["new [x]mutable variable `a` with value `val`"]
   72 |                 }
   73 |                 else {panic("${block.variant} not handled")}
      |                                      ~~~~~~~
   74 |             }
   75 |         }
